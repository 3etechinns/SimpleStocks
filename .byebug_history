exit
chart[idx]
c
chart[idx]
idx
c
exit
stock_chart
latest_stock_price_response[ticker]["quote"]["previousClose"]
latest_stock_price_response
ticker
exit
e
c
fetch_latest_stock_price
ticker
c
ticker
c
ticker
c
API_TOKEN
ticker
latest_stock_price_response[ticker]["quote"]["previousClose"]
c
latest_stock_price_response[ticker]["quote"]["previousClose"]
c
chart[idx]
c
chart[idx]
c
chart[idx]
c
chart[idx]
c
chart[idx]
c
chart[idx]
c
chart[idx]
c
chart[idx]
idx == 0
exit
c
chart[idx]
exit
day_data["close"]
idx
c
 stock_chart
c
latest_stock_price_response[ticker]["quote"]["latestPrice"]
latest_stock_price_response
c
latest_stock_price_response
JSON.parse(open(fetch_latest_stock_price).read)
latest_stock_price_response
JSON.parse(open(fetch_latest_stock_price).read)
 latest_stock_price_response
JSON.parse(open(fetch_latest_stock_price).read)
fetch_latest_stock_price
latest_stock_price_response
latest_stock_price_response[ticker]["quote"]
latest_stock_price_response[ticker]["quote"]["latestPrice"]
stock_chart
c
exit
c
day_data["close"].nil?
idx ==0
exit
day_data["close"].nil?
day_data["close"]
idx == 0
c
exit
day_data["close"].nil? && idx == 0 
day_data["close"].nil? idx == 0 
day_data["close"].nil?
day_data["close"].nil
idx
ticker
current_owned
day_data["close"]
exit
day_data["close"]
ls
exit
response["TSLA"]["chart"].first["close"]
response["TSLA"]["chart"].first
response["TSLA"]["chart"].first.close
response["TSLA"]["chart"].first
response["TSLA"]["chart"]
response["TSLA"]
response.keys.first
chart
exit
shares.keys.length > 0
shares.keys.length
shares.keys
shares.key
request
exit
buying_power_one_day
ticker
c
ticker
c
ticker
c
ticker
c
ticker
c
ticker
buying_power_one_day
order.shares
c
order.shares
buying_power_one_day
c
buying_power_one_day
order.shares
ticker
buying_power_one_day
c
order.shares
order.net_value
ticker
c
ticker
order.net_value
buying_power_one_day
exit
buying_power
current_balance
buying_power_chart
exit
Time.zone.parse(order["created_at"].to_s) < Time.zone.parse(day_data["label"])
Time.zone.parse(order["created_at"].to_s) Time.zone.parse(day_data["label"])
Time.zone.parse(order["created_at"].to_s)
Time.zone.parse(order["created_at"])
order["created_at"]
exit
result
result.push( { balance: balance, })
balance = 3
result = []
arr[4]
arr = [1,2,3]
response[response.keys.first]["chart"].first
response.keys.first
response["AAPL"]["chart"].first
response["AAPL"]
response
response["ticker"]["chart"]
response[ticker]["chart"]
response.first["chart"]
response.first["chart"].first
response.first
response["AAPL"]["chart"][37]["close"].nil?
response["AAPL"]["chart"][37]["close"] == nil
response["AAPL"]["chart"][37]["close"] == null
response["AAPL"]["chart"][37]["close"]
response["AAPL"]["chart"][34]["close"]
response["AAPL"]["chart"][35]["close"]
response["AAPL"]["chart"][25]["close"]
response["AAPL"]["chart"][15]["close"]
response["AAPL"]["chart"][10]["close"]
response["AAPL"]["chart"].first["close"] == null
response["AAPL"]["chart"].first["close"]
test
test.delete( test: 1)
test
test.delete( test: 2)
test
test.delete("test")
test = [{test: 1}, {test: 2}, {test: 3}, {test1: 1}]
test
test.delete(1)
test = [1,2,3,1]
stock_orders["AAPL"].first["created_at"] < Time.zone.parse(response["AAPL"]["chart"].first["label"])
stock_orders["AAPL"].first["created_at"] > Time.zone.parse(response["AAPL"]["chart"].first["label"])
 Time.zone.parse(response["AAPL"]["chart"].first["label"])
response["AAPL"]["chart"].first["label"]
stock_orders["AAPL"].fir
stock_orders["AAPL"]
response.keys.each { |ticker| puts 1 }
response.keys.each { |ticker| 1 }
response.keys.each { |ticker| ticker}
response.keys
response.each { |stock| stock }
response.each { |stock| puts 1 }
response.each { |stock| puts stock }
response
exit
Order.find_by(ticker: "TSLA").stock
Order.find_by(ticker: "TSLA").class
Order.find_by(ticker: "TSLA")
Order.all
orders
Orders
apple.orders
apple = Stock.find_by(ticker: "AAPL")
Stock.find_by(ticker: "AAPL")
Stock.find_by(ticker: "AAPL").orders
Stock.find_by(ticker: "AAPL")
Stock.first
Stock.all
stock.all
orders.stock
user.orders
user
user.orders.map{ |order| order.stock.ticker}
user.orders.map{ |order| order.stock}
user.orders
user.orders.stock
user = User.find_by( username: "Demo_User")
owned_shares.keys
Time.zone.parse(response["AAPL"]["chart"].first["label"]) <   Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"]) >   Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"])
Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"])
Time.parse(response["AAPL"]["chart"].first["label"])
response["AAPL"]["chart"].first["label"]
Time.parse(orders.first.created_at.to_s)
Time.parse(orders.first.created_at)
orders.first.created_at
orders.first
orders
response["AAPL"]["chart"].first["label"]
response["AAPL"]["chart"].first
response["AAPL"]["chart"]
response["AAPL"]["chart"]["label"]
response["AAPL"]["chart"].label
response["AAPL"]["chart"].length
response["AAPL"]["chart"]
response["AAPL"].chart
response["AAPL"]["chart"]
response["AAPL"].chart
response["AAPL"]
response.AAPL
response.class
response.length
response
c
exit
order
c
order
c
order
c
orders[2]
