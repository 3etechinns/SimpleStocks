exit
buying_power_one_day
ticker
c
ticker
c
ticker
c
ticker
c
ticker
c
ticker
buying_power_one_day
order.shares
c
order.shares
buying_power_one_day
c
buying_power_one_day
order.shares
ticker
buying_power_one_day
c
order.shares
order.net_value
ticker
c
ticker
order.net_value
buying_power_one_day
exit
buying_power
current_balance
buying_power_chart
exit
Time.zone.parse(order["created_at"].to_s) < Time.zone.parse(day_data["label"])
Time.zone.parse(order["created_at"].to_s) Time.zone.parse(day_data["label"])
Time.zone.parse(order["created_at"].to_s)
Time.zone.parse(order["created_at"])
order["created_at"]
exit
result
result.push( { balance: balance, })
balance = 3
result = []
arr[4]
arr = [1,2,3]
response[response.keys.first]["chart"].first
response.keys.first
response["AAPL"]["chart"].first
response["AAPL"]
response
response["ticker"]["chart"]
response[ticker]["chart"]
response.first["chart"]
response.first["chart"].first
response.first
response["AAPL"]["chart"][37]["close"].nil?
response["AAPL"]["chart"][37]["close"] == nil
response["AAPL"]["chart"][37]["close"] == null
response["AAPL"]["chart"][37]["close"]
response["AAPL"]["chart"][34]["close"]
response["AAPL"]["chart"][35]["close"]
response["AAPL"]["chart"][25]["close"]
response["AAPL"]["chart"][15]["close"]
response["AAPL"]["chart"][10]["close"]
response["AAPL"]["chart"].first["close"] == null
response["AAPL"]["chart"].first["close"]
test
test.delete( test: 1)
test
test.delete( test: 2)
test
test.delete("test")
test = [{test: 1}, {test: 2}, {test: 3}, {test1: 1}]
test
test.delete(1)
test = [1,2,3,1]
stock_orders["AAPL"].first["created_at"] < Time.zone.parse(response["AAPL"]["chart"].first["label"])
stock_orders["AAPL"].first["created_at"] > Time.zone.parse(response["AAPL"]["chart"].first["label"])
 Time.zone.parse(response["AAPL"]["chart"].first["label"])
response["AAPL"]["chart"].first["label"]
stock_orders["AAPL"].fir
stock_orders["AAPL"]
response.keys.each { |ticker| puts 1 }
response.keys.each { |ticker| 1 }
response.keys.each { |ticker| ticker}
response.keys
response.each { |stock| stock }
response.each { |stock| puts 1 }
response.each { |stock| puts stock }
response
exit
Order.find_by(ticker: "TSLA").stock
Order.find_by(ticker: "TSLA").class
Order.find_by(ticker: "TSLA")
Order.all
orders
Orders
apple.orders
apple = Stock.find_by(ticker: "AAPL")
Stock.find_by(ticker: "AAPL")
Stock.find_by(ticker: "AAPL").orders
Stock.find_by(ticker: "AAPL")
Stock.first
Stock.all
stock.all
orders.stock
user.orders
user
user.orders.map{ |order| order.stock.ticker}
user.orders.map{ |order| order.stock}
user.orders
user.orders.stock
user = User.find_by( username: "Demo_User")
owned_shares.keys
Time.zone.parse(response["AAPL"]["chart"].first["label"]) <   Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"]) >   Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"])
Time.zone.parse(orders.first.created_at.to_s)
Time.zone.parse(response["AAPL"]["chart"].first["label"])
Time.parse(response["AAPL"]["chart"].first["label"])
response["AAPL"]["chart"].first["label"]
Time.parse(orders.first.created_at.to_s)
Time.parse(orders.first.created_at)
orders.first.created_at
orders.first
orders
response["AAPL"]["chart"].first["label"]
response["AAPL"]["chart"].first
response["AAPL"]["chart"]
response["AAPL"]["chart"]["label"]
response["AAPL"]["chart"].label
response["AAPL"]["chart"].length
response["AAPL"]["chart"]
response["AAPL"].chart
response["AAPL"]["chart"]
response["AAPL"].chart
response["AAPL"]
response.AAPL
response.class
response.length
response
c
exit
order
c
order
c
order
c
orders[2]
orders[3]
orders
demo_user.orders
order
c
order
c
order
c
Date.parse(day["date"]).to_s == "2019-03-01"
Date.parse(day["date"]).to_s
Date.parse(day["date"])
Date.parse(day["date"]).to_s
Date.parse(day["date"])
day["date"]
Date.parse(Time.zone.local(2018, 2, 3, 10, 0, 0).to_s)
Time.zone.local(2018, 2, 3, 10, 0, 0)
order
order.shares
all_deposits
c
all_deposits
c
all_deposits
order
exit
id
c
all_deposits
c
all_deposits
c
all_deposits
c
filtered
filtered.length
c
filtered.length
filtered
c
filtered.length
filtered
c
filtered
exit
five_year_response[order.ticker]["chart"][0]
five_year_response[order.ticker]["chart"]
five_year_response[order.ticker].keys
five_year_response[order.ticker].chart
five_year_response[order.ticker]
five_year_response
fiver_year_response
c
exit
DateTime.parse("September 17, 2019") < orders.first.created_at
DateTime.parse("September 17, 2019") > orders.first.created_at
orders.first.created_at < orders.second.created_at
orders.first.created_at > orders.second.created_at
orders.first.created_at > ordesr.second.created_at
orders.second.created_at
orders.second
orders.first.created_at
orders.first.created_at.class
orders.first.created_at
DateTime.parse(orders.first.created_at)
Date_Time.parse(orders.first.created_at)
orders.first.created_at
orders.first
orders.keys
orders.first.ticker
orders.first
orders["ticker"]
orders
total_shares_value
exit
date3 > date2
date2 > date3
date1 > date3
date2 > date2
date1 > date2
date3 = DateTime.parse(date3)
date2 = DateTime.parse(date2)
date1 = DateTime.parse(response["AAPL"]["quote"]["latestTime"])
date1
date3 = "February 17, 2017"
date2 = "September 10, 2019"
response["AAPL"]["quote"]["latestTime"]
DateTime.parse(response["AAPL"]["quote"]["latestTime"]) >
date1 = Date.new(response["AAPL"]["quote"]["latestTime"])
response["AAPL"]["quote"]["latestTime"].class
response["AAPL"]["quote"]["latestTime"].type
response["AAPL"]["quote"]["latestTime"]
response["AAPL"]["quote"]
response["AAPL"]
exit
response.keys
response["AAPL"]
stock[1]["quote"]
stock
exit
response
exit
stock[1]["quote"]["latestPrice"]
